// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// rel字段表示关系，在schema中用于表示外键约束，字段在db中不存在。
// 写扩散实现（维护多个发件箱，比如PrivateMsg和Room）

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = "file:./db.sqlite"
}

// 用户
model User {
  id    Int    @id @default(autoincrement())
  username String 
  tag String  // 四位数tag 0000-9999, username#tag 构成用户唯一标识
  
  email String @unique
  pwd String

  bio String ? // 简介（个性签名）
  avatar String ? // 头像链接

  // 外键关系
  friendReqSendRel FriendRequest[] @relation("friendReqSendRel") // 发送的好友请求，外键关系
  friendReqReceiveRel FriendRequest[] @relation("friendReqReceiveRel") // 接收的好友请求，外键关系
  msgSendRel Message[] @relation("msgSendRel") // 发送的消息，外键关系
  msgReceiveRel Message[] @relation("msgReceiveRel") // 接受的消息，外键关系
  channelsRel UsersOnChannels[] // 加入的频道，外键关系
  channelsOwnerRel Channel[] @relation("channelsOwnerRel")  // 拥有的频道，外键关系
  friendsRel Friend[] @relation("friendsRel")  // 我的朋友，外键关系
  friendsToRel Friend[] @relation("friendsToRel") // 我是谁的朋友，外键关系
  roomsRel Room[] // 房间列表，外键关系

  privateMsgFromRel PrivateMsg[] @relation("privateMsgFromRel")
  privateMsgToRel PrivateMsg[] @relation("privateMsgToRel")

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
  @@unique(fields:[username, tag], name: "usernameAndTagIdx")
}

// 好友列表(用户-用户)，多对多关系表。注意：添加好友操作需要insert两次
// alias UsersOnUsers
model Friend {
  uid Int
  userRel User @relation(name: "friendsToRel", fields: [uid], references: [id])
  friendId Int
  friendRel User @relation(name: "friendsRel", fields: [friendId], references: [id])
  alias String @default("")  // uid对friendId的好友备注
  status Int @default(0) // 好友状态，0: 正常 1: 删除 2:屏蔽
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
  
  @@id([uid, friendId])
}

// 添加好友请求，User-FriendRequest 多重1对多关系
model FriendRequest {
  id Int @id @default(autoincrement())
  fromUid Int // 请求者id
  fromUidRel User @relation(name: "friendReqReceiveRel", fields: [fromUid], references: [id])
  toUid Int // 接收者id
  toUidRel User @relation(name: "friendReqSendRel", fields: [toUid], references: [id])
  status Int // 请求状态，0: 通过   1: 拒绝   2: Pending
  content String @default("") // 打招呼内容
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
  @@unique(fields:[fromUid, toUid], name: "fromUidAndtoUidIdx")
}

// 消息实体表，User-Message 多重1对多
model Message {
  id Int @id @default(autoincrement())
  fromUid Int // 发送者
  fromUidRel User @relation(name: "msgReceiveRel", fields: [fromUid], references: [id])
  toUid Int ? // 接收者（群聊时，无接收者）
  toUidRel User ? @relation(name: "msgSendRel", fields: [toUid], references: [id])
  content String // 消息实体
  msgType Int // 消息类型，-1:系统消息 0:点对点 1:群发
  privateMsgId Int ? // 消息所属私聊，仅在msg_type=0时使用
  roomId Int ? // 消息所属房间，仅在msg_type=1时使用
  pushed Boolean ?  // 是否成功推送（基于4个报文实现消息可靠推送）
  read  Boolean ? // 是否已读（暂时不实现）
  createdAt DateTime @default(now()) // 创建时间 
  updatedAt DateTime @default(now()) @updatedAt // 创建时间
  @@index(fields: [fromUid, toUid], name: "fromUidAndtoUidIdx")
  @@index(fields: [toUid, fromUid], name: "toUidAndFromUidIdx")
}

// 私聊，User-PrivateMsg：多重一对多
model PrivateMsg {
  id Int @id @default(autoincrement())
  fromUid Int
  fromUidRel User @relation(name: "privateMsgFromRel", fields: [fromUid], references: [id])
  toUid Int
  toUidRel User @relation(name: "privateMsgToRel", fields: [toUid], references: [id])
  status Int @default(0) // 私聊状态，0：正常
  createdAt DateTime @default(now()) // 创建时间 
  updatedAt DateTime @default(now()) @updatedAt // 创建时间
  @@unique(fields:[fromUid, toUid], name: "fromUidAndtoUidIdx")
}

// 频道列表（群聊），User-Channel：多对多
model Channel {
  id Int @id @default(autoincrement())
  name String // 频道名称
  desc String // 频道描述
  ownerUid Int // 拥有者id
  ownerUidRel User @relation(name: "channelsOwnerRel", fields: [ownerUid], references: [id]) // 拥有者外键关系
  usersRel UsersOnChannels[]
  roomsRel Room[] // 房间列表
  status Int // 频道状态。0：正常 1：关闭
  createdAt DateTime @default(now()) // 创建时间
  updatedAt DateTime @default(now()) @updatedAt
  @@index(fields: [ownerUid], name: "ownerUidIdx")
}

// 用户-频道 多对多关系表（显式explicit写法）
model UsersOnChannels {
  uid     Int 
  userRel       User     @relation(fields: [uid], references: [id])
  channelId Int 
  channelRel   Channel @relation(fields: [channelId], references: [id])
  status Int // 关系状态。0：正常，1：已失效
  invitedBy String ? // 邀请人
  createdAt DateTime @default(now()) // 关系添加时间（用户加入频道时间）
  updatedAt DateTime @default(now()) @updatedAt

  @@id([uid, channelId])
}

// 房间表，频道-房间关系：1对多
model Room {
  id Int @id @default(autoincrement())
  name String // 房间名称
  desc String // 房间描述
  channelId Int // 所属频道Id
  channelRel Channel @relation(fields: [channelId], references: [id])
  creatorUid Int // 创建者id
  creatorUidRel User @relation(fields: [creatorUid], references: [id])
  status Int // 房间状态。0：正常 1：关闭
  createdAt DateTime @default(now()) // 创建时间
  updatedAt DateTime @default(now()) @updatedAt
}